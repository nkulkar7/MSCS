
  Named Pipe for Exchanging Lines


    Objective

You will implement a kernel-level pipe for exchanging numbers among
user-level processes. You will learn about concurrency, synchronization,
and various kernel primitives. You may find the following resources
helpful in addition to any other online resources.

  * Slides: Kernel API for Semaphores and Waitqueues
    <https://oscourse.github.io/slides/semaphores_waitqs_kernel_api.pdf>
  * Linux Device Drivers book
    <http://free-electrons.com/doc/books/ldd3.pdf>
  * Any other online resources


    Task A

Learn what is a named pipe. Learn how to create and use a named pipe
using command line in Linux (or any UNIX system) using the mkfifo command.


    Task B

Read, understand, and run, following two user-level C-programs for a
consumer and a producer.

  * Consumer C program
    <https://oscourse.github.io/assignments/consumer_numbers.c>
  * Producer C program
    <https://oscourse.github.io/assignments/producer_numbers.c>
  * Run one consumer and one producer concurrently.
      o Kill the producer with Ctrl-C. Leave consumer running. What
        happens and why?
      o Kill the consumer with Ctrl-C. Leave producer running. What
        happens and why? 
  * Run one consumer and multiple producers concurrently.
  * Run multiple consumers and one producer concurrently.
  * Run multiple consumers and multiple producers concurrently. 

Explain in your report, what you see, and why.


    Task C

Now solve the problem you observed in Task B as follows. Replace the
UNIX named pipe in the producer and consumer scripts above with your own
implementation of a miscellaneous character device (say /dev/numpipe) as
a kernel module in the Linux Kernel. This device must maintain a FIFO
queue (i.e. a pipe) of maximum N numbers. N must be given as a module
parameter during the insmod command.

  * Producers write numbers to /dev/numpipe.
  * Consumers read numbers from /dev/numpipe and print it on the screen.
  * When the pipe is full, i.e. when there are N numbers are stored in
    /dev/numpipe, then any producer trying to write will block.
  * When the pipe is empty, i.e. when there are no numbers in
    /dev/numpipe, then any consumer trying to read will block.
  * When a consumer reads from a full pipe, it wakes up all blocked
    producers. In this case, no blocked consumer should be woken up.
  * When a producer writes to an empty pipe, it wakes up all blocked
    consumers. In this case, no blocked producer should be woken up.
  * No deadlocks. All producers and consumers make progress as long as
    at least one of each is running.
  * No race conditions. Each number that is written by producers is read
    EXACTLY once by one consumer. No number is lost. No number is read
    more than once. 


    What you need to learn to complete this assignment

You can use either the semaphore-version of the solution to
producer-consumer problem or a monitor-type solution, both of which were
covered in class. It is likely the semaphore version may be easier to
implement. You will need to learn the following kernel mechanisms.

  * Using semaphores in kernel using the following functions:
    sema_init(), DEFINE_SEMAPHORE, down_interruptible() (preferred over
    down()), and up().
  * For alternative implementations using mutexes and waitqs:
    mutex_init(), DEFINE_MUTEX, mutex_lock(), mutex_unlock(),
    init_wait_queue_head(), wait_event_interruptible() (preferred over
    wait_event), and wake_up_interruptible() (or wake_up).
  * Memory allocation in kernel using kmalloc() or kzalloc(). 


    Frequently asked questions

Q: Is there any locking in user space for Part C?
A: No, all synchronization happens in kernel space.

Q: Do we implement our own producers and consumers in user space?
A: No, use the two C programs given above.

Q: How to I terminate producers and consumers?
A: After fixed number of iterations OR using Ctrl-C.

Q: Why should I use *_interruptible versions of kernel functions?
A: So that your producer/consumer code can be terminated using Ctrl-C in
user space. We'll test for this during demo.

Q: How does the producer generate a unique number?
A: Please see C programs above.

Q: How to I run multiple producers and consumers concurrently?
A: Open multiple terminals. Run one consumer or producer in the
foreground each terminal.


    Grading Guidelines

  * Parts A and B : 20
  * Part C: 80
      o Code works for one producer and one consumer.
      o Code works for multiple concurrent producers and consumers.
      o No deadlocks. All producers and consumers make progress as long
        as at least one of each is running.
      o No race conditions. Each line is read EXACTLY once by one
        consumer. No line is lost. No line is read more than once.
      o Producers block on write when pipe is full.
      o Consumers block on read when pipe is empty.
      o Blocked producers are not woken up by other producers. Blocked
        consumers are not woken up by other consumers.
      o Blocked producers and consumers can be terminated cleanly using
        Ctrl-C
      o Handle all major error conditions. 

