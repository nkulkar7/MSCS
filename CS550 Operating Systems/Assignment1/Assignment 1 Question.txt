
  Shell: Process control in Foreground and Background


    Description

This assignment helps you learn about processes and basic process
management in a shell. You are asked to write a simple shell program
called minish. This shell must work as follows. You start the shell by
running minish program. This will give a prompt of your shell as follows:

minish>

From here onwards, you should be able to execute and control *any
program/command* just as you would in a normal shell. For instance

minish> ls
[ Output of ls shown here. Your shell waits for ls to finish. ]
minish>

Additionally, your shell should be able to do the following:

 1. Execute commands with multiple arguments. For example:

    		minish> Command arg1 arg2 arg3
    		[ Output of Command shown here. Your shell waits for Command to finish. ]
    		minish>
    		

 2. Execute commands in either foreground or background mode. In
    foreground mode, the shell just waits for the command to complete
    before displaying the shell prompt again (as in the above example).
    In background mode, a command is executed with an ampersand &
    suffix. The shell prompt appears immediately after typing a command
    name (say Command1) and shell becomes ready to accept and execute
    the next command (say Command2), even as Command1 continues
    executing in the /background/. For example:

    		minish> Command1 &
    		minish> Command2
    		[Output of Command1 and Command2 may interleave here in arbitrary order. Your shell waits for Command 2 to finish.]
    		minish>
    		

 3. Maintain multiple processes running in background mode
    simultaneously. For example:

    		minish> Command1 &
    		minish> Command2 &
    		minish> Command3 &
    		minish> 
    		[Output of Command1, Command2, and Command3 may interleave here in arbitrary order. Shell does not wait for any of the commands to finish.]

    		

 4. List all currently running background jobs using "listjobs" command.

    		minish> Command1 &
    		minish> Command2 &
    		minish> Command3 &
    		minish> listjobs
    		List of backgrounded processes:
    		Command 1 with PID 1000 Status:RUNNING
    		Command 2 with PID 1005 Status:RUNNING
    		Command 3 with PID 1007 Status:FINISHED
    		minish>
    		

 5. Bring a background process to foreground using the fg command with
    process ID as argument. For instance, continuing from the previous
    example:

    		minish> fg 1005
    		[ Your shell waits for Command2 to finish. ]
    		minish>
    		

 6. Terminate a process by pressing [Ctrl-C]. Your shell must not get
    killed; only the process running inside your shell must terminate.
 7. The exit command should terminate your shell. Take care to avoid
    orphan processes.
 8. The cd command must actually change the directory of your shell and
    the pwd command must return the current directory of your shell.
    Note that normal fork-exec mechanism won't work here. Why?


    Do Nots:

  * DO NOT use any special wrapper libraries or classes to borrow the
    basic functionality required in this assignment. If in doubt, ask
    the instructor first BEFORE doing so.
  * DO NOT use the *system(...) * syscall to execute the programs in
    your shell directly.
  * DO NOT write five or six different programs, one for each feature.
    Write *one single program* that includes all the above features.


    Hints:

  * Build and test one functionality at a time.
  * Make backup copies of partially working versions of your code. This
    way, if you irreparably screw up your code, then you can at least
    roll back to your last backup copy.
  * First design your data structures and code-structure before you
    begin coding each feature. Anticipate specific problems you will face.
  * Check out man page for the following:
      o fork()
      o execv(), execl(), execlp(), execvp() (which one should you use?)
      o waitpid()
      o kill()
      o chdir()
      o getcwd()


    Grading Guidelines

This is how we will grade your assignment during the demo. So please
prioritize your work accordingly.

The final score = part1 + part2.


      Part1 Program Demo

  * 5 - README, Makefile, Compilation without errors
  * 10 - Executing a command with no arguments in foreground
  * 10 - Executing a command with multiple arguments in foreground
  * 10 - Executing a single command in background
  * 10 - Executing multiple commands in background simultaneously
  * 10 - Printing an accurate list of background processes with listjobs
    command.
  * 15 - Bringing a background process to foreground using the fg command.
  * 10 - Terminating a foreground process using Ctrl+C without killing
    the shell, and killing minish using exit.
  * 10 - Implementation of cd and pwd command
  * 10 - Error Handling: Most important part here is to make sure that
    you check and handle the errors returned by ALL systems calls used
    in your program. Also check for other common error conditions in
    your program. But don't go overboard with error checking. We will
    not try to intentionally break your code with bad input that may be
    irrelevant to the assignment's goals.

    Total score of part1 = 100


      Part2 Answering Questions

    TAs will ask the questions about this project/your code. You need to
    fully understand this project and your implementation.

    Total score of part2 = 100

